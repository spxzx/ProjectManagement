// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: task_service.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTaskStages(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskStagesResponse, error)
	GetProjectMember(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*ProjectMemberResponse, error)
	GetTaskStageDetailList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskStageDetailListResponse, error)
	SaveTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*Task, error)
	MoveTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSelfTaskList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*SelfTaskListResponse, error)
	ReadTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*Task, error)
	GetTaskMemberList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskMemberList, error)
	GetTaskLog(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskLogList, error)
	GetTaskWorkTimeList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskWorkTimeResponse, error)
	SaveTaskWorkTimeList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadFile(ctx context.Context, in *TaskFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTaskSources(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskSourceResponse, error)
	CreateComment(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTaskStages(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskStagesResponse, error) {
	out := new(TaskStagesResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskStages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetProjectMember(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*ProjectMemberResponse, error) {
	out := new(ProjectMemberResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetProjectMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskStageDetailList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskStageDetailListResponse, error) {
	out := new(TaskStageDetailListResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskStageDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/SaveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MoveTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/MoveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetSelfTaskList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*SelfTaskListResponse, error) {
	out := new(SelfTaskListResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetSelfTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ReadTask(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/ReadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskMemberList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskMemberList, error) {
	out := new(TaskMemberList)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskLog(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskLogList, error) {
	out := new(TaskLogList)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskWorkTimeList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskWorkTimeResponse, error) {
	out := new(TaskWorkTimeResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskWorkTimeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTaskWorkTimeList(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/SaveTaskWorkTimeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UploadFile(ctx context.Context, in *TaskFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/uploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskSources(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*TaskSourceResponse, error) {
	out := new(TaskSourceResponse)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/GetTaskSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateComment(ctx context.Context, in *TaskRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/task.service.TaskService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	GetTaskStages(context.Context, *TaskRpcRequest) (*TaskStagesResponse, error)
	GetProjectMember(context.Context, *TaskRpcRequest) (*ProjectMemberResponse, error)
	GetTaskStageDetailList(context.Context, *TaskRpcRequest) (*TaskStageDetailListResponse, error)
	SaveTask(context.Context, *TaskRpcRequest) (*Task, error)
	MoveTask(context.Context, *TaskRpcRequest) (*emptypb.Empty, error)
	GetSelfTaskList(context.Context, *TaskRpcRequest) (*SelfTaskListResponse, error)
	ReadTask(context.Context, *TaskRpcRequest) (*Task, error)
	GetTaskMemberList(context.Context, *TaskRpcRequest) (*TaskMemberList, error)
	GetTaskLog(context.Context, *TaskRpcRequest) (*TaskLogList, error)
	GetTaskWorkTimeList(context.Context, *TaskRpcRequest) (*TaskWorkTimeResponse, error)
	SaveTaskWorkTimeList(context.Context, *TaskRpcRequest) (*emptypb.Empty, error)
	UploadFile(context.Context, *TaskFileRequest) (*emptypb.Empty, error)
	GetTaskSources(context.Context, *TaskRpcRequest) (*TaskSourceResponse, error)
	CreateComment(context.Context, *TaskRpcRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) GetTaskStages(context.Context, *TaskRpcRequest) (*TaskStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStages not implemented")
}
func (UnimplementedTaskServiceServer) GetProjectMember(context.Context, *TaskRpcRequest) (*ProjectMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMember not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskStageDetailList(context.Context, *TaskRpcRequest) (*TaskStageDetailListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStageDetailList not implemented")
}
func (UnimplementedTaskServiceServer) SaveTask(context.Context, *TaskRpcRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedTaskServiceServer) MoveTask(context.Context, *TaskRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTask not implemented")
}
func (UnimplementedTaskServiceServer) GetSelfTaskList(context.Context, *TaskRpcRequest) (*SelfTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfTaskList not implemented")
}
func (UnimplementedTaskServiceServer) ReadTask(context.Context, *TaskRpcRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskMemberList(context.Context, *TaskRpcRequest) (*TaskMemberList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskMemberList not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskLog(context.Context, *TaskRpcRequest) (*TaskLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskLog not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskWorkTimeList(context.Context, *TaskRpcRequest) (*TaskWorkTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskWorkTimeList not implemented")
}
func (UnimplementedTaskServiceServer) SaveTaskWorkTimeList(context.Context, *TaskRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskWorkTimeList not implemented")
}
func (UnimplementedTaskServiceServer) UploadFile(context.Context, *TaskFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskSources(context.Context, *TaskRpcRequest) (*TaskSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskSources not implemented")
}
func (UnimplementedTaskServiceServer) CreateComment(context.Context, *TaskRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTaskStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskStages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskStages(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetProjectMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetProjectMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetProjectMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetProjectMember(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskStageDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskStageDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskStageDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskStageDetailList(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/SaveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTask(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/MoveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MoveTask(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetSelfTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetSelfTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetSelfTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetSelfTaskList(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ReadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ReadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/ReadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ReadTask(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskMemberList(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskLog(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskWorkTimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskWorkTimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskWorkTimeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskWorkTimeList(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTaskWorkTimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTaskWorkTimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/SaveTaskWorkTimeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTaskWorkTimeList(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/uploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UploadFile(ctx, req.(*TaskFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/GetTaskSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskSources(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.TaskService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateComment(ctx, req.(*TaskRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.service.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskStages",
			Handler:    _TaskService_GetTaskStages_Handler,
		},
		{
			MethodName: "GetProjectMember",
			Handler:    _TaskService_GetProjectMember_Handler,
		},
		{
			MethodName: "GetTaskStageDetailList",
			Handler:    _TaskService_GetTaskStageDetailList_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _TaskService_SaveTask_Handler,
		},
		{
			MethodName: "MoveTask",
			Handler:    _TaskService_MoveTask_Handler,
		},
		{
			MethodName: "GetSelfTaskList",
			Handler:    _TaskService_GetSelfTaskList_Handler,
		},
		{
			MethodName: "ReadTask",
			Handler:    _TaskService_ReadTask_Handler,
		},
		{
			MethodName: "GetTaskMemberList",
			Handler:    _TaskService_GetTaskMemberList_Handler,
		},
		{
			MethodName: "GetTaskLog",
			Handler:    _TaskService_GetTaskLog_Handler,
		},
		{
			MethodName: "GetTaskWorkTimeList",
			Handler:    _TaskService_GetTaskWorkTimeList_Handler,
		},
		{
			MethodName: "SaveTaskWorkTimeList",
			Handler:    _TaskService_SaveTaskWorkTimeList_Handler,
		},
		{
			MethodName: "uploadFile",
			Handler:    _TaskService_UploadFile_Handler,
		},
		{
			MethodName: "GetTaskSources",
			Handler:    _TaskService_GetTaskSources_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _TaskService_CreateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_service.proto",
}
